// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReviewMuse.Data;

#nullable disable

namespace ReviewMuse.Data.Migrations
{
    [DbContext(typeof(ReviewMuseDbContext))]
    [Migration("20230717123928_seedingCategoriesBooks")]
    partial class seedingCategoriesBooks
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Pseudonim")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookCoverId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EditorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RecordCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("TotalRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookCoverId");

                    b.HasIndex("EditorId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.BookCover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CoverType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("BookCovers");
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.BookStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("BooksStatus");
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.Editor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EditorSince")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Editors");
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.MappingTables.AuthorsBooks", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("AuthorsBooks");

                    b.HasData(
                        new
                        {
                            AuthorId = new Guid("b8d67a4c-b7ac-4f6f-84d4-d0a6760aeb16"),
                            BookId = new Guid("1049b652-3e53-4d71-ac09-eca3d9d9f7f6")
                        },
                        new
                        {
                            AuthorId = new Guid("b8d67a4c-b7ac-4f6f-84d4-d0a6760aeb16"),
                            BookId = new Guid("88e662a2-0077-4f72-b79c-b3b3cceaa6cd")
                        },
                        new
                        {
                            AuthorId = new Guid("b8d67a4c-b7ac-4f6f-84d4-d0a6760aeb16"),
                            BookId = new Guid("cc506971-44f0-4c9d-bfed-a49dfeebe97f")
                        },
                        new
                        {
                            AuthorId = new Guid("7ba32a34-fc77-4f50-8894-a306c5b42238"),
                            BookId = new Guid("27a14db5-ee4c-4d07-9dec-a6f2a8347ff1")
                        },
                        new
                        {
                            AuthorId = new Guid("7ba32a34-fc77-4f50-8894-a306c5b42238"),
                            BookId = new Guid("8e233224-1cac-458b-a93d-22976e9621df")
                        },
                        new
                        {
                            AuthorId = new Guid("7ba32a34-fc77-4f50-8894-a306c5b42238"),
                            BookId = new Guid("1e004174-0070-40b5-afa5-cda5e2958929")
                        },
                        new
                        {
                            AuthorId = new Guid("38548843-5141-4578-9b50-c9ef413f24bc"),
                            BookId = new Guid("a9ec87ae-49ac-4c8a-b132-70c1450e7b04")
                        },
                        new
                        {
                            AuthorId = new Guid("920499ce-f57b-49d6-a6bf-3539c9fe092f"),
                            BookId = new Guid("9d83a3a7-44ab-49bb-ab7e-6d1610c57079")
                        },
                        new
                        {
                            AuthorId = new Guid("27c84413-3e20-43a2-8206-3bcd5130ae5c"),
                            BookId = new Guid("9c466385-2f0f-45e1-a3e8-974018d091cf")
                        },
                        new
                        {
                            AuthorId = new Guid("27c84413-3e20-43a2-8206-3bcd5130ae5c"),
                            BookId = new Guid("ef478645-3611-4395-bc9c-8d133eb47db4")
                        },
                        new
                        {
                            AuthorId = new Guid("27c84413-3e20-43a2-8206-3bcd5130ae5c"),
                            BookId = new Guid("43867201-ada9-48d0-992a-e892d0dcd1b3")
                        },
                        new
                        {
                            AuthorId = new Guid("4a4e6c7b-9fa4-4f63-b016-4834e4d702d3"),
                            BookId = new Guid("cd20df78-3771-44b3-84cb-1fab11c820bd")
                        },
                        new
                        {
                            AuthorId = new Guid("2a710f84-af6d-422c-a623-87152dde9e6d"),
                            BookId = new Guid("6af48184-d368-4ed1-8e95-8628acce7fcb")
                        },
                        new
                        {
                            AuthorId = new Guid("c497e8ea-e4b6-48dd-9342-727151636d54"),
                            BookId = new Guid("58403cca-47b4-4413-b71d-d0376027591b")
                        },
                        new
                        {
                            AuthorId = new Guid("c497e8ea-e4b6-48dd-9342-727151636d54"),
                            BookId = new Guid("15ceb205-5c7f-47bc-bc7a-cc4513bf69a6")
                        },
                        new
                        {
                            AuthorId = new Guid("c497e8ea-e4b6-48dd-9342-727151636d54"),
                            BookId = new Guid("94480496-b29d-43e7-ad97-f8cf3b5df297")
                        });
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.MappingTables.CategoriesAuthors", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("CategoriesAuthors");
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.MappingTables.CategoriesBooks", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("CategoriesBooks");

                    b.HasData(
                        new
                        {
                            CategoryId = 7,
                            BookId = new Guid("cd20df78-3771-44b3-84cb-1fab11c820bd")
                        },
                        new
                        {
                            CategoryId = 19,
                            BookId = new Guid("cd20df78-3771-44b3-84cb-1fab11c820bd")
                        },
                        new
                        {
                            CategoryId = 2,
                            BookId = new Guid("cd20df78-3771-44b3-84cb-1fab11c820bd")
                        },
                        new
                        {
                            CategoryId = 1,
                            BookId = new Guid("8e233224-1cac-458b-a93d-22976e9621df")
                        },
                        new
                        {
                            CategoryId = 5,
                            BookId = new Guid("8e233224-1cac-458b-a93d-22976e9621df")
                        },
                        new
                        {
                            CategoryId = 13,
                            BookId = new Guid("8e233224-1cac-458b-a93d-22976e9621df")
                        },
                        new
                        {
                            CategoryId = 9,
                            BookId = new Guid("8e233224-1cac-458b-a93d-22976e9621df")
                        },
                        new
                        {
                            CategoryId = 7,
                            BookId = new Guid("8e233224-1cac-458b-a93d-22976e9621df")
                        },
                        new
                        {
                            CategoryId = 7,
                            BookId = new Guid("9d83a3a7-44ab-49bb-ab7e-6d1610c57079")
                        },
                        new
                        {
                            CategoryId = 1,
                            BookId = new Guid("9d83a3a7-44ab-49bb-ab7e-6d1610c57079")
                        },
                        new
                        {
                            CategoryId = 8,
                            BookId = new Guid("9d83a3a7-44ab-49bb-ab7e-6d1610c57079")
                        },
                        new
                        {
                            CategoryId = 6,
                            BookId = new Guid("9d83a3a7-44ab-49bb-ab7e-6d1610c57079")
                        },
                        new
                        {
                            CategoryId = 7,
                            BookId = new Guid("a9ec87ae-49ac-4c8a-b132-70c1450e7b04")
                        },
                        new
                        {
                            CategoryId = 9,
                            BookId = new Guid("a9ec87ae-49ac-4c8a-b132-70c1450e7b04")
                        },
                        new
                        {
                            CategoryId = 36,
                            BookId = new Guid("a9ec87ae-49ac-4c8a-b132-70c1450e7b04")
                        },
                        new
                        {
                            CategoryId = 13,
                            BookId = new Guid("a9ec87ae-49ac-4c8a-b132-70c1450e7b04")
                        },
                        new
                        {
                            CategoryId = 52,
                            BookId = new Guid("6af48184-d368-4ed1-8e95-8628acce7fcb")
                        },
                        new
                        {
                            CategoryId = 7,
                            BookId = new Guid("6af48184-d368-4ed1-8e95-8628acce7fcb")
                        },
                        new
                        {
                            CategoryId = 19,
                            BookId = new Guid("6af48184-d368-4ed1-8e95-8628acce7fcb")
                        },
                        new
                        {
                            CategoryId = 14,
                            BookId = new Guid("6af48184-d368-4ed1-8e95-8628acce7fcb")
                        },
                        new
                        {
                            CategoryId = 5,
                            BookId = new Guid("ef478645-3611-4395-bc9c-8d133eb47db4")
                        },
                        new
                        {
                            CategoryId = 37,
                            BookId = new Guid("ef478645-3611-4395-bc9c-8d133eb47db4")
                        },
                        new
                        {
                            CategoryId = 24,
                            BookId = new Guid("ef478645-3611-4395-bc9c-8d133eb47db4")
                        },
                        new
                        {
                            CategoryId = 2,
                            BookId = new Guid("ef478645-3611-4395-bc9c-8d133eb47db4")
                        },
                        new
                        {
                            CategoryId = 5,
                            BookId = new Guid("9c466385-2f0f-45e1-a3e8-974018d091cf")
                        },
                        new
                        {
                            CategoryId = 37,
                            BookId = new Guid("9c466385-2f0f-45e1-a3e8-974018d091cf")
                        },
                        new
                        {
                            CategoryId = 24,
                            BookId = new Guid("9c466385-2f0f-45e1-a3e8-974018d091cf")
                        },
                        new
                        {
                            CategoryId = 2,
                            BookId = new Guid("9c466385-2f0f-45e1-a3e8-974018d091cf")
                        },
                        new
                        {
                            CategoryId = 1,
                            BookId = new Guid("cc506971-44f0-4c9d-bfed-a49dfeebe97f")
                        },
                        new
                        {
                            CategoryId = 4,
                            BookId = new Guid("cc506971-44f0-4c9d-bfed-a49dfeebe97f")
                        },
                        new
                        {
                            CategoryId = 8,
                            BookId = new Guid("cc506971-44f0-4c9d-bfed-a49dfeebe97f")
                        },
                        new
                        {
                            CategoryId = 5,
                            BookId = new Guid("cc506971-44f0-4c9d-bfed-a49dfeebe97f")
                        },
                        new
                        {
                            CategoryId = 7,
                            BookId = new Guid("cc506971-44f0-4c9d-bfed-a49dfeebe97f")
                        },
                        new
                        {
                            CategoryId = 3,
                            BookId = new Guid("cc506971-44f0-4c9d-bfed-a49dfeebe97f")
                        },
                        new
                        {
                            CategoryId = 1,
                            BookId = new Guid("27a14db5-ee4c-4d07-9dec-a6f2a8347ff1")
                        },
                        new
                        {
                            CategoryId = 9,
                            BookId = new Guid("27a14db5-ee4c-4d07-9dec-a6f2a8347ff1")
                        },
                        new
                        {
                            CategoryId = 5,
                            BookId = new Guid("27a14db5-ee4c-4d07-9dec-a6f2a8347ff1")
                        },
                        new
                        {
                            CategoryId = 13,
                            BookId = new Guid("27a14db5-ee4c-4d07-9dec-a6f2a8347ff1")
                        },
                        new
                        {
                            CategoryId = 1,
                            BookId = new Guid("88e662a2-0077-4f72-b79c-b3b3cceaa6cd")
                        },
                        new
                        {
                            CategoryId = 7,
                            BookId = new Guid("88e662a2-0077-4f72-b79c-b3b3cceaa6cd")
                        },
                        new
                        {
                            CategoryId = 8,
                            BookId = new Guid("88e662a2-0077-4f72-b79c-b3b3cceaa6cd")
                        },
                        new
                        {
                            CategoryId = 5,
                            BookId = new Guid("88e662a2-0077-4f72-b79c-b3b3cceaa6cd")
                        },
                        new
                        {
                            CategoryId = 7,
                            BookId = new Guid("15ceb205-5c7f-47bc-bc7a-cc4513bf69a6")
                        },
                        new
                        {
                            CategoryId = 19,
                            BookId = new Guid("15ceb205-5c7f-47bc-bc7a-cc4513bf69a6")
                        },
                        new
                        {
                            CategoryId = 14,
                            BookId = new Guid("15ceb205-5c7f-47bc-bc7a-cc4513bf69a6")
                        },
                        new
                        {
                            CategoryId = 1,
                            BookId = new Guid("1e004174-0070-40b5-afa5-cda5e2958929")
                        },
                        new
                        {
                            CategoryId = 13,
                            BookId = new Guid("1e004174-0070-40b5-afa5-cda5e2958929")
                        },
                        new
                        {
                            CategoryId = 5,
                            BookId = new Guid("1e004174-0070-40b5-afa5-cda5e2958929")
                        },
                        new
                        {
                            CategoryId = 7,
                            BookId = new Guid("1e004174-0070-40b5-afa5-cda5e2958929")
                        },
                        new
                        {
                            CategoryId = 9,
                            BookId = new Guid("1e004174-0070-40b5-afa5-cda5e2958929")
                        },
                        new
                        {
                            CategoryId = 7,
                            BookId = new Guid("58403cca-47b4-4413-b71d-d0376027591b")
                        },
                        new
                        {
                            CategoryId = 19,
                            BookId = new Guid("58403cca-47b4-4413-b71d-d0376027591b")
                        },
                        new
                        {
                            CategoryId = 12,
                            BookId = new Guid("58403cca-47b4-4413-b71d-d0376027591b")
                        },
                        new
                        {
                            CategoryId = 50,
                            BookId = new Guid("58403cca-47b4-4413-b71d-d0376027591b")
                        },
                        new
                        {
                            CategoryId = 5,
                            BookId = new Guid("43867201-ada9-48d0-992a-e892d0dcd1b3")
                        },
                        new
                        {
                            CategoryId = 37,
                            BookId = new Guid("43867201-ada9-48d0-992a-e892d0dcd1b3")
                        },
                        new
                        {
                            CategoryId = 24,
                            BookId = new Guid("43867201-ada9-48d0-992a-e892d0dcd1b3")
                        },
                        new
                        {
                            CategoryId = 2,
                            BookId = new Guid("43867201-ada9-48d0-992a-e892d0dcd1b3")
                        },
                        new
                        {
                            CategoryId = 1,
                            BookId = new Guid("1049b652-3e53-4d71-ac09-eca3d9d9f7f6")
                        },
                        new
                        {
                            CategoryId = 3,
                            BookId = new Guid("1049b652-3e53-4d71-ac09-eca3d9d9f7f6")
                        },
                        new
                        {
                            CategoryId = 7,
                            BookId = new Guid("1049b652-3e53-4d71-ac09-eca3d9d9f7f6")
                        },
                        new
                        {
                            CategoryId = 2,
                            BookId = new Guid("1049b652-3e53-4d71-ac09-eca3d9d9f7f6")
                        },
                        new
                        {
                            CategoryId = 14,
                            BookId = new Guid("94480496-b29d-43e7-ad97-f8cf3b5df297")
                        },
                        new
                        {
                            CategoryId = 26,
                            BookId = new Guid("94480496-b29d-43e7-ad97-f8cf3b5df297")
                        },
                        new
                        {
                            CategoryId = 50,
                            BookId = new Guid("94480496-b29d-43e7-ad97-f8cf3b5df297")
                        },
                        new
                        {
                            CategoryId = 19,
                            BookId = new Guid("94480496-b29d-43e7-ad97-f8cf3b5df297")
                        });
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.MappingTables.UsersBooks", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookStatusId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BookStatusId");

                    b.ToTable("UsersBooks");
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ReviewMuse.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ReviewMuse.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReviewMuse.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ReviewMuse.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.Book", b =>
                {
                    b.HasOne("ReviewMuse.Data.Models.BookCover", "BookCover")
                        .WithMany("BookCovers")
                        .HasForeignKey("BookCoverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReviewMuse.Data.Models.Editor", "Editor")
                        .WithMany("EditorBooks")
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReviewMuse.Data.Models.Language", "Language")
                        .WithMany("BooksLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BookCover");

                    b.Navigation("Editor");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.Editor", b =>
                {
                    b.HasOne("ReviewMuse.Data.Models.ApplicationUser", "User")
                        .WithMany("Editors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.MappingTables.AuthorsBooks", b =>
                {
                    b.HasOne("ReviewMuse.Data.Models.Author", "Author")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReviewMuse.Data.Models.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.MappingTables.CategoriesAuthors", b =>
                {
                    b.HasOne("ReviewMuse.Data.Models.Author", "Author")
                        .WithMany("AuthorCategories")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReviewMuse.Data.Models.Category", "Category")
                        .WithMany("AuthorsCategory")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.MappingTables.CategoriesBooks", b =>
                {
                    b.HasOne("ReviewMuse.Data.Models.Book", "Book")
                        .WithMany("BookCategories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReviewMuse.Data.Models.Category", "Category")
                        .WithMany("BooksCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.MappingTables.UsersBooks", b =>
                {
                    b.HasOne("ReviewMuse.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserBooks")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReviewMuse.Data.Models.Book", "Book")
                        .WithMany("BookUsers")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReviewMuse.Data.Models.BookStatus", "BookStatus")
                        .WithMany("BooksStatuses")
                        .HasForeignKey("BookStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Book");

                    b.Navigation("BookStatus");
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.Review", b =>
                {
                    b.HasOne("ReviewMuse.Data.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReviewMuse.Data.Models.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Editors");

                    b.Navigation("Reviews");

                    b.Navigation("UserBooks");
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.Author", b =>
                {
                    b.Navigation("AuthorBooks");

                    b.Navigation("AuthorCategories");
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookCategories");

                    b.Navigation("BookUsers");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.BookCover", b =>
                {
                    b.Navigation("BookCovers");
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.BookStatus", b =>
                {
                    b.Navigation("BooksStatuses");
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.Category", b =>
                {
                    b.Navigation("AuthorsCategory");

                    b.Navigation("BooksCategories");
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.Editor", b =>
                {
                    b.Navigation("EditorBooks");
                });

            modelBuilder.Entity("ReviewMuse.Data.Models.Language", b =>
                {
                    b.Navigation("BooksLanguages");
                });
#pragma warning restore 612, 618
        }
    }
}
